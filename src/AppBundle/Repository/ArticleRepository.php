<?php

namespace AppBundle\Repository;
use Doctrine\ORM\EntityRepository;

/**
 * ArticleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ArticleRepository extends EntityRepository
{
    public function getArticlesWithDep()
    {
        return $this->createQueryBuilder('a')
            ->select('a, c, t, u, cm')
            ->leftJoin('a.categories', 'c')
            ->leftJoin('a.tags', 't')
            ->leftJoin('a.comments', 'cm')
            ->join('a.user', 'u')
            ->getQuery()
            ->getResult();
    }

    public function getArticlesWithCountComment()
    {
        return $this->createQueryBuilder('a')
            ->select('a, c, t, u, count(cm.id) as countComments')
            ->leftJoin('a.categories', 'c')
            ->leftJoin('a.tags', 't')
            ->leftJoin('a.comments', 'cm')
            ->join('a.user', 'u')
            ->groupBy('a, c, t, u')
            ->getQuery()
            ->getResult();
    }

    public function getArticleWithCountComment($slug)
    {
        return $this->createQueryBuilder('a')
            ->select('a, c, t, u, count(cm.id) as countComments')
            ->leftJoin('a.categories', 'c')
            ->leftJoin('a.tags', 't')
            ->leftJoin('a.comments', 'cm')
            ->join('a.user', 'u')
            ->where('a.slug = ?1')
            ->groupBy('a, c, t, u')
            ->setParameter(1, $slug)
            ->getQuery()
            ->getSingleResult();
    }

    public function getArticlesSorted($sortBy, $param)
    {
        switch ($sortBy) {
            case 'category':
                return $this->createQueryBuilder('a')
                    ->select('a, c, t, u, count(cm.id) as countComments')
                    ->leftJoin('a.categories', 'c')
                    ->leftJoin('a.tags', 't')
                    ->leftJoin('a.comments', 'cm')
                    ->join('a.user', 'u')
                    ->where('c.slug = ?1')
                    ->groupBy('a, c, t, u')
                    ->setParameter(1, $param)
                    ->getQuery()
                    ->getResult();
                break;
            case 'tag':
                return $this->createQueryBuilder('a')
                    ->select('a, c, t, u, count(cm.id) as countComments')
                    ->leftJoin('a.categories', 'c')
                    ->leftJoin('a.tags', 't')
                    ->leftJoin('a.comments', 'cm')
                    ->join('a.user', 'u')
                    ->where('t.slug = ?1')
                    ->groupBy('a, c, t, u')
                    ->setParameter(1, $param)
                    ->getQuery()
                    ->getResult();
                break;
            case 'author':
                return $this->createQueryBuilder('a')
                    ->select('a, c, t, u, count(cm.id) as countComments')
                    ->leftJoin('a.categories', 'c')
                    ->leftJoin('a.tags', 't')
                    ->leftJoin('a.comments', 'cm')
                    ->join('a.user', 'u')
                    ->where('u.slug = ?1')
                    ->groupBy('a, c, t, u')
                    ->setParameter(1, $param)
                    ->getQuery()
                    ->getResult();
                break;
            case 'date':

                break;
        }


    }
}
